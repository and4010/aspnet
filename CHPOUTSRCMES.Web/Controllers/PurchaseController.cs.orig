using MES.Web.Models;
using MES.Web.Models.Purchase;
using MES.Web.ViewModels.Purchase;
using System;
using System.Collections.Generic;
using System.Web.Mvc;
using PdfSharp;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using System.IO;
using System.Text;
using System.Drawing;
using System.Drawing.Imaging;
using System.Collections;
using PdfSharp.Drawing.BarCodes;
using MES.Web.Util;
using MES.Web.ViewModels;
using System.Web.Routing;
using System.Web;
using NPOI.SS.UserModel;
using NPOI.HSSF.UserModel;
using NPOI.XSSF.UserModel;
using System.Data;

namespace MES.Web.Controllers
{
    public class PurchaseController : Controller
    {

        //
        // GET: /Inbound/
        public ActionResult Index()
        {
            var model = new PurchaseViewModel()
            {
                Year = DateTime.Now.Year.ToString(),
                Month = DateTime.Now.Month.ToString("00"),
                Warehouse = "TB2"
            };
            ViewBag.MonthItems = GetMonths();
            ViewBag.YearItems = GetYears();
            ViewBag.WarehouseItems = GetWarehouses();

            return View(model);
        }

        public JsonResult GetEvents(string id)
        {
            var events = new List<FullCalendarEventModel>();

            if (id == "2020-02-01")
            {
                events.Add(new FullCalendarEventModel()
                {
                    id = 1,
                    title = "WHLU5445132" + " 已入庫",
                    start = "2020-02-22 10:00:00",
                    end = "2020-02-22 24:00:00",
                    allDay = false,
                    url = @Url.Action("Detail", "Purchase", new { CONTAINER_NO = "WHLU5445132" }),
                    Status = "0"
                }); 

                events.Add(new FullCalendarEventModel()
                {
                    id = 2,
                    title = "WHLU5321157" + " 待入庫",
                    start = "2020-02-25 10:00:00",
                    end = "2020-02-25 24:00:00",
                    allDay = false,
                    url = @Url.Action("Detail", "Purchase", new { CONTAINER_NO = "WHLU5321157" }),
                    Status = "1"
                });

                events.Add(new FullCalendarEventModel()
                {
                    id = 3,
                    title = "WHAU5231488" + " 已取消",
                    start = "2020-02-25 14:00:00",
                    end = "2020-02-25 24:00:00",
                    allDay = false,
                    url = @Url.Action("Detail", "Purchase", new { CONTAINER_NO = "WHAU5231488" }),
                    Status = "2"
                });
            }


            if (id == "2020-03-01")
            {
                events.Add(new FullCalendarEventModel()
                {
                    id = 1,
                    title = "WHLU5445132" + " 已入庫",
                    start = "2020-03-05 10:00:00",
                    end = "2020-03-05 24:00:00",
                    allDay = false,
                    url = @Url.Action("Detail", "Purchase", new { CONTAINER_NO = "WHLU5445132" }),
                    Status = "0"
                });

                events.Add(new FullCalendarEventModel()
                {
                    id = 2,
                    title = "WHLU5321157" + " 待入庫",
                    start = "2020-03-06 10:00:00",
                    end = "2020-03-06 24:00:00",
                    allDay = false,
                    url = @Url.Action("Detail", "Purchase", new { CONTAINER_NO = "WHLU5321157" }),
                    Status = "1"
                });

                events.Add(new FullCalendarEventModel()
                {
                    id = 3,
                    title = "WHAU5231488" + " 已取消",
                    start = "2020-03-07 14:00:00",
                    end = "2020-03-07 24:00:00",
                    allDay = false,
                    url = @Url.Action("Detail", "Purchase", new { CONTAINER_NO = "WHAU5231488" }),
                    Status = "2"
                });
            }

            return Json(events.ToArray(), JsonRequestBehavior.AllowGet);
        }

        private List<SelectListItem> GetMonths()
        {
            List<SelectListItem> months = new List<SelectListItem>();
            for (int i = 1; i <= 12; i++)
            {
                string month = i.ToString();
                month = month.PadLeft(2, '0');
                months.Add(new SelectListItem()
                {
                    Text = month,
                    Value = month,
                    Selected = false,
                });
            }
            return months;
        }

        private List<SelectListItem> GetYears()
        {
            List<SelectListItem> years = new List<SelectListItem>();
            int nowYear = DateTime.Now.Year;

            if (nowYear < 100)
            {
                nowYear = 100; //fullcendar支援的最小年份
            }

            int maxYear = nowYear + 1;
            int minYear = nowYear - 4;

            if (minYear < 100)
            {
                minYear = 100; //fullcendar支援的最小年份
            }

            for (int i = minYear; i <= maxYear; i++)
            {
                string year = i.ToString();
                year = year.PadLeft(4, '0');
                years.Add(new SelectListItem()
                {
                    Text = year,
                    Value = year,
                    Selected = false,
                });
            }
            return years;
        }

        private List<SelectListItem> GetWarehouses()
        {
            List<SelectListItem> warehouses = new List<SelectListItem>();

            warehouses.Add(new SelectListItem()
            {
                Text = "TB2",
                Value = "TB2",
                Selected = false,
            });
            return warehouses;
        }

        // GET: Purchase
        [HttpGet, ActionName("Detail")]
        public ActionResult PurchaseDetail(string CONTAINER_NO = "")
        {
            PurchaseDetailViewModel model = new PurchaseDetailViewModel();

            model.CreateDate = "2019-07-20  13:20";
            model.CabinetNumber = "WHLU54425";


            return View(model);
        }



        [HttpGet, ActionName("Header")]
        public JsonResult Header(DataTableAjaxPostViewModel data)
        {
            List<DetailModel.PaperRollModel> model = new List<DetailModel.PaperRollModel>();

            model.Add(new DetailModel.PaperRollModel()
            {
                Id = 1,
                Subinventory = "SFG",
                Locator = "TB2",
                PartNo = "4FHIZA025000889RL00",
                PaperType = "FHIZ"
            ,
                BaseWeight = "02500",
                Specification = "0889RL00",
                RollReamQty = "",
                TransactionQuantity = "20",
                TransactionUom="MT",
                PrimanyQuantity="20000",
                PrimaryUom="KG",
            });
            model.Add(new DetailModel.PaperRollModel()
            {
                Id = 2,
                Locator = "TB2",
                PartNo = "635RL00",
                PaperType = ""
         ,
                BaseWeight = "02500",
                Specification = "0889RL00",
                RollReamQty = "",
                TransactionQuantity = "15",
                TransactionUom = "MT",
                PrimanyQuantity = "15000",
                PrimaryUom = "KG"
            });

            return Json(new { draw = data.Draw, recordsFiltered = model.Count, recordsTotal = model.Count, data = model }, JsonRequestBehavior.AllowGet);
            //draw：為避免XSS攻擊，內建的控制。 
            //recordsTotal：篩選前的總資料數 
            //recordsFiltered：篩選後的總資料數(jQuery DataTable內建的篩選，因本案例沒用到，與recordsTotal相同
            //data：該分頁所需要的資料。
        }




        [HttpGet, ActionName("Body")]
        public JsonResult Body(DataTableAjaxPostViewModel data)
        {
            List<DetailModel.PaperRollDetailModel> model = new List<DetailModel.PaperRollDetailModel>();

            model.Add(new DetailModel.PaperRollDetailModel()
            {
                Id = "1",
                Subinventory = "SFG",
                Locator = "TB2",
                Barocde = "",
                PartNo = "",
                PaperType = ""
            ,
                BaseWeight = "",
                Specification = "",
                TheoreticalWeight = "",
                TransactionQuantity ="20",
                TransactionUom = "MT",
                PrimanyQuantity ="20000",
                PrimaryUom = "KG",
                RollReamQty = "",
                Status = "已入庫",
                Remark = ""
            });
            model.Add(new DetailModel.PaperRollDetailModel()
            {
                Id = "2",
                Subinventory = "SFG",
                Locator = "TB2",
                Barocde = "",
                PartNo = "",
                PaperType = ""
            ,
                BaseWeight = "",
                Specification = "",
                TheoreticalWeight = "",
                TransactionQuantity = "15",
                TransactionUom = "MT",
                PrimanyQuantity = "15000",
                PrimaryUom = "KG",
                RollReamQty = "",
                Status = "已入庫",
                Remark = ""
            });

            model.Add(new DetailModel.PaperRollDetailModel()
            {
                Id = "3",
                Subinventory = "SFG",
                Locator = "TB2",
                Barocde = "",
                PartNo = "",
                PaperType = ""
            ,
                BaseWeight = "",
                Specification = "",
                TheoreticalWeight = "",
                TransactionQuantity = "20",
                TransactionUom = "MT",
                PrimanyQuantity = "20000",
                PrimaryUom = "KG",
                RollReamQty = "",
                Status = "待入庫",
                Remark = ""
            });


            return Json(new { draw = data.Draw, recordsFiltered = model.Count, recordsTotal = model.Count, data = model }, JsonRequestBehavior.AllowGet);
            //draw：為避免XSS攻擊，內建的控制。 
            //recordsTotal：篩選前的總資料數 
            //recordsFiltered：篩選後的總資料數(jQuery DataTable內建的篩選，因本案例沒用到，與recordsTotal相同
            //data：該分頁所需要的資料。
        }



        [HttpGet, ActionName("FlatHeader")]
        public JsonResult FlatHeader(DataTableAjaxPostViewModel data)
        {
            List<DetailModel.FlatModel> model = new List<DetailModel.FlatModel>();

            model.Add(new DetailModel.FlatModel()
            {
                Id = 1,
                Subinventory = "TB2",
                Locator = "SFG",
                PartNo = "",
                ReamWeight = ""
            ,
                RollReamQty = "3",
                PackingType = "打件",
                RollReamWt = "1",
                TransactionQuantity = "2MT",
                TtlRollReam = "20000RE",
                DeliveryQty = "20000KG"
            });
            model.Add(new DetailModel.FlatModel()
            {
                Id = 2,
                Subinventory = "TB2",
                Locator = "SFG",
                PartNo = "",
                ReamWeight = ""
            ,
                RollReamQty = "3",
                PackingType = "令包",
                RollReamWt = "1",
                TransactionQuantity = "3MT",
                TtlRollReam = "30000RE",
                DeliveryQty = "30000KG"
            });

            return Json(new { draw = data.Draw, recordsFiltered = model.Count, recordsTotal = model.Count, data = model }, JsonRequestBehavior.AllowGet);
            //draw：為避免XSS攻擊，內建的控制。 
            //recordsTotal：篩選前的總資料數 
            //recordsFiltered：篩選後的總資料數(jQuery DataTable內建的篩選，因本案例沒用到，與recordsTotal相同
            //data：該分頁所需要的資料。
        }




        [HttpGet, ActionName("FlatBody")]
        public JsonResult FlatBody(DataTableAjaxPostViewModel data)
        {
            List<DetailModel.FlatDetailModel> model = new List<DetailModel.FlatDetailModel>();

            model.Add(new DetailModel.FlatDetailModel()
            {
                Id = 1,
                Subinventory = "SFG",
                Locator = "TB1",
                Barocde = "",
                PartNo = "",
                ReamWeight = ""
            ,
                PackingType = "打件",
                EveyReam = "",
                Qty = "",
                Status = "已入庫",
                Remark = ""
            });
            model.Add(new DetailModel.FlatDetailModel()
            {
                Id = 2,
                Subinventory = "SFG",
                Locator = "TB2",
                Barocde = "",
                PartNo = "",
                ReamWeight = ""
            ,
                PackingType = "令包",
                EveyReam = "",
                Qty = "",
                Status = "待入庫",
                Remark = ""
            });

            model.Add(new DetailModel.FlatDetailModel()
            {
                Id = 3,
                Subinventory = "TB2",
                Barocde = "123456790",
                PartNo = "",
                ReamWeight = ""
            ,
                PackingType = "令包",
                EveyReam = "",
                Qty = "",
                Status = "待入庫",
                Remark = ""
            });


            return Json(new { draw = data.Draw, recordsFiltered = model.Count, recordsTotal = model.Count, data = model }, JsonRequestBehavior.AllowGet);
            //draw：為避免XSS攻擊，內建的控制。 
            //recordsTotal：篩選前的總資料數 
            //recordsFiltered：篩選後的總資料數(jQuery DataTable內建的篩選，因本案例沒用到，與recordsTotal相同
            //data：該分頁所需要的資料。
        }


        [HttpGet]
        public ActionResult ImportBodyPaperRoll()
        {
            return PartialView();
        }

        [HttpGet]
        public ActionResult ImportBodyFlat()
        {
            return PartialView();
        }


        public ActionResult PaperRollView()
        {
            return View();
        }

        public ActionResult FlatView()
        {
            return View();
        }

        public ActionResult PaperRollEdit()
        {
            var model = new PurchaseViewModel()
            {
                Warehouse = "TB2"
            };
            ViewBag.WarehouseItems = GetWarehouses();
            return View(model);
        }

        public ActionResult FlatEdit()
        {
            var model = new PurchaseViewModel()
            {
                Warehouse = "TB2"
            };
            ViewBag.WarehouseItems = GetWarehouses();
            return View();
        }

        [HttpPost]
        public ActionResult GetLabel(List<string> id)
        //public ActionResult GetLabel(List<PurchaseDetailModel> model)
        {
            string msg = "";
            var lables = LabelModel.GetLabels(id);
            Util.PdfLableUtil pdf = new PdfLableUtil();
            string labelFullPath = pdf.GeneratePdfLabels2(lables, ref msg);
            if (string.IsNullOrEmpty(labelFullPath))
            {
                throw new Exception("產生PDF發生錯誤:" + msg);
            }

            var fileStream = new FileStream(labelFullPath,
                                 FileMode.Open,
                                 FileAccess.Read
                               );
            return new FileStreamResult(fileStream, "application/pdf");


            //var lables = LabelModel.GetLabels();

            //string msg = "";
            //Util.PdfLableUtil pdf = new PdfLableUtil();
            //MemoryStream workStream = pdf.GeneratePdfLabels(lables, ref msg);
            //if (workStream == null)
            //{
            //    throw new Exception("產生PDF發生錯誤:" + msg);
            //}

            //try
            //{
            //    byte[] byteInfo = workStream.ToArray();
            //    workStream.Write(byteInfo, 0, byteInfo.Length);
            //    //workStream.Flush();
            //    workStream.Position = 0;

            //    //var contentLength = byteInfo.Length;
            //    //Response.AppendHeader("Content-Length", contentLength.ToString());
            //    //Response.AppendHeader("Content-Disposition", "inline; filename=" + "123" + ".pdf");

            //    Response.AppendHeader("content-disposition", "inline; filename=Label.pdf");
            //    //return File(byteInfo, "application/pdf");
            //    return new FileStreamResult(workStream, "application/pdf");
            //}
            //catch (Exception ex)
            //{
            //    throw new Exception("產生PDF發生錯誤:" + ex.Message);
            //}

            //return Json(new { lables = lables });
        }


<<<<<<< HEAD
       
=======
        [HttpPost]
        public ActionResult Label(List<LabelModel> lables)
        {
            string msg = "";
            Util.PdfLableUtil pdf = new PdfLableUtil();
            MemoryStream workStream = pdf.GeneratePdfLabels2(lables, ref msg);
            if (workStream == null)
            {
                throw new Exception("產生PDF發生錯誤:" + msg);
            }

            try
            {
                byte[] byteInfo = workStream.ToArray();
                workStream.Write(byteInfo, 0, byteInfo.Length);
                //workStream.Flush();
                workStream.Position = 0;
                return new FileStreamResult(workStream, "application/pdf");
            }
            catch (Exception ex)
            {
                throw new Exception("產生PDF發生錯誤:" + ex.Message);
            }

        }
>>>>>>> origin/eric



        [HttpPost]
        public JsonResult UploadFilePaperRoll(HttpPostedFileBase file, DataTableAjaxPostViewModel data)
        {
            var result = new ResultModel();
            var detail = new List<DetailModel.PaperRollDetailModel>();
            if (file == null || file.ContentLength == 0)
            {
                result.Msg = "檔案不得空白";
                result.Success = false;
            }
            else
            {
                string extension = Path.GetExtension(file.FileName);
                if(file.FileName.EndsWith(".xls") || file.FileName.EndsWith(".xlsx"))
                {
                    //string filelocation = Server.MapPath("~/Content/");

                    //if (System.IO.File.Exists(filelocation))
                    //{
                    //    System.IO.File.Delete(filelocation);
                    //};
                    try
                    {
                        //file.SaveAs(Path.Combine(filelocation, file.FileName));
                        ExcelImportPaperRoll(file, data, ref detail,ref result);              
                    }
                    catch(Exception e)
                    {
                        result.Msg = e.Message;
                        result.Success = false;
                    }
                  
                }
                else
                {
                    result.Msg = "只能上傳excel文件";
                    result.Success = false;
                }
            }
            return Json(new { draw = data.Draw, recordsFiltered = detail.Count, recordsTotal = detail.Count, data = detail, result }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult ExcelImportPaperRoll(HttpPostedFileBase file, DataTableAjaxPostViewModel data,ref List<DetailModel.PaperRollDetailModel> detail,ref ResultModel result)
        {

            var papper = new ExcelImport();
            papper.PaperRollDetail(file,ref data,ref detail,ref result);

            return Json(new { draw = data.Draw, recordsFiltered = detail.Count, recordsTotal = detail.Count, data = detail , result }, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public JsonResult UploadFileFlat(HttpPostedFileBase file, DataTableAjaxPostViewModel data)
        {
            var result = new ResultModel();
            var detail = new List<DetailModel.FlatDetailModel>();
            if (file == null || file.ContentLength == 0)
            {
                result.Msg = "檔案不得空白";
                result.Success = false;
            }
            else
            {
                string extension = Path.GetExtension(file.FileName);
                if (file.FileName.EndsWith(".xls") || file.FileName.EndsWith(".xlsx"))
                {
                    try
                    {
                        //file.SaveAs(Path.Combine(filelocation, file.FileName));
                        ExcelImportFlat(file, data, ref detail, ref result);
                    }
                    catch (Exception e)
                    {
                        result.Msg = e.Message;
                        result.Success = false;
                    }

                }
                else
                {
                    result.Msg = "只能上傳excel文件";
                    result.Success = false;
                }
            }
            return Json(new { draw = data.Draw, recordsFiltered = detail.Count, recordsTotal = detail.Count, data = detail, result }, JsonRequestBehavior.AllowGet);
        }



        [HttpPost]
        public JsonResult ExcelImportFlat(HttpPostedFileBase file, DataTableAjaxPostViewModel data, ref List<DetailModel.FlatDetailModel> detail, ref ResultModel result)
        {
            var papper = new ExcelImport();
            papper.FlatDetail(file, ref detail, ref result);
            return Json(new { draw = data.Draw, recordsFiltered = detail.Count, recordsTotal = detail.Count, data = detail, result }, JsonRequestBehavior.AllowGet);
        }


    }
}