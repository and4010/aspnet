-- =============================================
-- Author:		Polo Lin
-- Create date: 2020/08/17
-- Description:	餘切規格資料同步(ITEMS_T 及 ITEMS_TMP_T)
-- =============================================
CREATE PROCEDURE [dbo].[SP_ItemSync]

AS
BEGIN
	
	DECLARE @deletelist TABLE (
		INVENTORY_ITEM_ID BIGINT,
		ITEM_NUMBER NVARCHAR(40),
		CATEGORY_CODE_INV NVARCHAR(4000),
		CATEGORY_NAME_INV NVARCHAR(13),
		CATEGORY_CODE_COST NVARCHAR(4000),
		CATEGORY_NAME_COST NVARCHAR(8),
		CATEGORY_CODE_CONTROL NVARCHAR(4000),
		CATEGORY_NAME_CONTROL NVARCHAR(16),
		ITEM_DESC_ENG NVARCHAR(240),
		ITEM_DESC_SCH NVARCHAR(240),
		ITEM_DESC_TCH NVARCHAR(240),
		PRIMARY_UOM_CODE NVARCHAR(3),
		SECONDARY_UOM_CODE NVARCHAR(3),
		INVENTORY_ITEM_STATUS_CODE NVARCHAR(10),
		ITEM_TYPE NVARCHAR(30),
		CATALOG_ELEM_VAL_010 NVARCHAR(4000),
		CATALOG_ELEM_VAL_020 NVARCHAR(4000),
		CATALOG_ELEM_VAL_030 NVARCHAR(4000),
		CATALOG_ELEM_VAL_040 NVARCHAR(4000),
		CATALOG_ELEM_VAL_050 NVARCHAR(4000),
		CATALOG_ELEM_VAL_060 NVARCHAR(4000),
		CATALOG_ELEM_VAL_070 NVARCHAR(4000),
		CATALOG_ELEM_VAL_080 NVARCHAR(4000),
		CATALOG_ELEM_VAL_090 NVARCHAR(4000),
		CATALOG_ELEM_VAL_100 NVARCHAR(4000),
		CATALOG_ELEM_VAL_110 NVARCHAR(4000),
		CATALOG_ELEM_VAL_120 NVARCHAR(4000),
		CATALOG_ELEM_VAL_130 NVARCHAR(4000),
		CATALOG_ELEM_VAL_140 NVARCHAR(4000),
		CREATED_BY BIGINT,
		CREATION_DATE DATETIME,
		LAST_UPDATE_BY BIGINT,
		LAST_UPDATE_DATE DATETIME
	);
	
	DECLARE @mergelist TABLE (
		INVENTORY_ITEM_ID BIGINT,
		ITEM_NUMBER NVARCHAR(40),
		CATEGORY_CODE_INV NVARCHAR(4000),
		CATEGORY_NAME_INV NVARCHAR(13),
		CATEGORY_CODE_COST NVARCHAR(4000),
		CATEGORY_NAME_COST NVARCHAR(8),
		CATEGORY_CODE_CONTROL NVARCHAR(4000),
		CATEGORY_NAME_CONTROL NVARCHAR(16),
		ITEM_DESC_ENG NVARCHAR(240),
		ITEM_DESC_SCH NVARCHAR(240),
		ITEM_DESC_TCH NVARCHAR(240),
		PRIMARY_UOM_CODE NVARCHAR(3),
		SECONDARY_UOM_CODE NVARCHAR(3),
		INVENTORY_ITEM_STATUS_CODE NVARCHAR(10),
		ITEM_TYPE NVARCHAR(30),
		CATALOG_ELEM_VAL_010 NVARCHAR(4000),
		CATALOG_ELEM_VAL_020 NVARCHAR(4000),
		CATALOG_ELEM_VAL_030 NVARCHAR(4000),
		CATALOG_ELEM_VAL_040 NVARCHAR(4000),
		CATALOG_ELEM_VAL_050 NVARCHAR(4000),
		CATALOG_ELEM_VAL_060 NVARCHAR(4000),
		CATALOG_ELEM_VAL_070 NVARCHAR(4000),
		CATALOG_ELEM_VAL_080 NVARCHAR(4000),
		CATALOG_ELEM_VAL_090 NVARCHAR(4000),
		CATALOG_ELEM_VAL_100 NVARCHAR(4000),
		CATALOG_ELEM_VAL_110 NVARCHAR(4000),
		CATALOG_ELEM_VAL_120 NVARCHAR(4000),
		CATALOG_ELEM_VAL_130 NVARCHAR(4000),
		CATALOG_ELEM_VAL_140 NVARCHAR(4000),
		CREATED_BY BIGINT,
		CREATION_DATE DATETIME,
		LAST_UPDATE_BY BIGINT,
		LAST_UPDATE_DATE DATETIME,
		CONTROL_FLAG CHAR(1)
	);

	DECLARE @tableVar TABLE (
		MergeAction VARCHAR(20), 
		InsertedID INT, 
		DeletedID INT)

	DECLARE @success INT = 0, @code INT = 0, @message NVARCHAR(500) = '';
	DECLARE @deleteCount INT = 0, @updateCount INT = 0, @insertCount INT = 0;
	
	
	BEGIN TRY
		SET @success = @success + 1
		--收集需要刪除的項目
		INSERT INTO @deletelist (
			INVENTORY_ITEM_ID, ITEM_NUMBER, CATEGORY_CODE_INV, CATEGORY_NAME_INV, CATEGORY_CODE_COST
,CATEGORY_NAME_COST, CATEGORY_CODE_CONTROL, CATEGORY_NAME_CONTROL, ITEM_DESC_ENG, ITEM_DESC_SCH
,ITEM_DESC_TCH, PRIMARY_UOM_CODE, SECONDARY_UOM_CODE, INVENTORY_ITEM_STATUS_CODE, ITEM_TYPE
,CATALOG_ELEM_VAL_010, CATALOG_ELEM_VAL_020, CATALOG_ELEM_VAL_030, CATALOG_ELEM_VAL_040, CATALOG_ELEM_VAL_050
,CATALOG_ELEM_VAL_060, CATALOG_ELEM_VAL_070, CATALOG_ELEM_VAL_080, CATALOG_ELEM_VAL_090, CATALOG_ELEM_VAL_100
,CATALOG_ELEM_VAL_110, CATALOG_ELEM_VAL_120, CATALOG_ELEM_VAL_130, CATALOG_ELEM_VAL_140
,CREATED_BY, CREATION_DATE, LAST_UPDATE_BY, LAST_UPDATE_DATE) 
		SELECT 
			INVENTORY_ITEM_ID, ITEM_NUMBER, CATEGORY_CODE_INV, CATEGORY_NAME_INV, CATEGORY_CODE_COST
,CATEGORY_NAME_COST, CATEGORY_CODE_CONTROL, CATEGORY_NAME_CONTROL, ITEM_DESC_ENG, ITEM_DESC_SCH
,ITEM_DESC_TCH, PRIMARY_UOM_CODE, SECONDARY_UOM_CODE, INVENTORY_ITEM_STATUS_CODE, ITEM_TYPE
,CATALOG_ELEM_VAL_010, CATALOG_ELEM_VAL_020, CATALOG_ELEM_VAL_030, CATALOG_ELEM_VAL_040, CATALOG_ELEM_VAL_050
,CATALOG_ELEM_VAL_060, CATALOG_ELEM_VAL_070, CATALOG_ELEM_VAL_080, CATALOG_ELEM_VAL_090, CATALOG_ELEM_VAL_100
,CATALOG_ELEM_VAL_110, CATALOG_ELEM_VAL_120, CATALOG_ELEM_VAL_130, CATALOG_ELEM_VAL_140
,CREATED_BY, CREATION_DATE, LAST_UPDATE_BY, LAST_UPDATE_DATE 
		FROM (
			SELECT 
				INVENTORY_ITEM_ID, ITEM_NUMBER, CATEGORY_CODE_INV, CATEGORY_NAME_INV, CATEGORY_CODE_COST
,CATEGORY_NAME_COST, CATEGORY_CODE_CONTROL, CATEGORY_NAME_CONTROL, ITEM_DESC_ENG, ITEM_DESC_SCH
,ITEM_DESC_TCH, PRIMARY_UOM_CODE, SECONDARY_UOM_CODE, INVENTORY_ITEM_STATUS_CODE, ITEM_TYPE
,CATALOG_ELEM_VAL_010, CATALOG_ELEM_VAL_020, CATALOG_ELEM_VAL_030, CATALOG_ELEM_VAL_040, CATALOG_ELEM_VAL_050
,CATALOG_ELEM_VAL_060, CATALOG_ELEM_VAL_070, CATALOG_ELEM_VAL_080, CATALOG_ELEM_VAL_090, CATALOG_ELEM_VAL_100
,CATALOG_ELEM_VAL_110, CATALOG_ELEM_VAL_120, CATALOG_ELEM_VAL_130, CATALOG_ELEM_VAL_140
,CREATED_BY, CREATION_DATE, LAST_UPDATE_BY, LAST_UPDATE_DATE
			FROM ITEMS_T O
			WHERE CONTROL_FLAG <> 'D'
			EXCEPT
			SELECT
				INVENTORY_ITEM_ID, ITEM_NUMBER, CATEGORY_CODE_INV, CATEGORY_NAME_INV, CATEGORY_CODE_COST
,CATEGORY_NAME_COST, CATEGORY_CODE_CONTROL, CATEGORY_NAME_CONTROL, ITEM_DESC_ENG, ITEM_DESC_SCH
,ITEM_DESC_TCH, PRIMARY_UOM_CODE, SECONDARY_UOM_CODE, INVENTORY_ITEM_STATUS_CODE, ITEM_TYPE
,CATALOG_ELEM_VAL_010, CATALOG_ELEM_VAL_020, CATALOG_ELEM_VAL_030, CATALOG_ELEM_VAL_040, CATALOG_ELEM_VAL_050
,CATALOG_ELEM_VAL_060, CATALOG_ELEM_VAL_070, CATALOG_ELEM_VAL_080, CATALOG_ELEM_VAL_090, CATALOG_ELEM_VAL_100
,CATALOG_ELEM_VAL_110, CATALOG_ELEM_VAL_120, CATALOG_ELEM_VAL_130, CATALOG_ELEM_VAL_140
,CREATED_BY, CREATION_DATE, LAST_UPDATE_BY, LAST_UPDATE_DATE
			FROM ITEMS_TMP_T T
		) A

		--如有須刪除的 更新CONTROL_FLAG = D
		IF EXISTS (SELECT TOP 1 * FROM @deletelist)
		BEGIN
			--更新CONTROL_FLAG = D
			UPDATE ITEMS_T SET CONTROL_FLAG = 'D' 
			FROM (
				SELECT  * FROM @deletelist
			) A 
			WHERE ITEMS_T.INVENTORY_ITEM_ID = A.INVENTORY_ITEM_ID
			

			SELECT @deleteCount = @@ROWCOUNT

			--失敗，引發EXCEPTION 記錄問題
			IF(@deleteCount <= 0 OR @@ERROR <> 0)
			BEGIN
				SELECT @message = '刪除，更新CONTROL_FLAG失敗 ERROR:' + CAST(@@ERROR AS VARCHAR(100))
				RAISERROR(@message, 16, @success)
			END
		END


		SET @success = @success + 1
		--收集需要更新或新增的項目
		INSERT INTO @mergelist (INVENTORY_ITEM_ID, ITEM_NUMBER, CATEGORY_CODE_INV, CATEGORY_NAME_INV, CATEGORY_CODE_COST
,CATEGORY_NAME_COST, CATEGORY_CODE_CONTROL, CATEGORY_NAME_CONTROL, ITEM_DESC_ENG, ITEM_DESC_SCH
,ITEM_DESC_TCH, PRIMARY_UOM_CODE, SECONDARY_UOM_CODE, INVENTORY_ITEM_STATUS_CODE, ITEM_TYPE
,CATALOG_ELEM_VAL_010, CATALOG_ELEM_VAL_020, CATALOG_ELEM_VAL_030, CATALOG_ELEM_VAL_040, CATALOG_ELEM_VAL_050
,CATALOG_ELEM_VAL_060, CATALOG_ELEM_VAL_070, CATALOG_ELEM_VAL_080, CATALOG_ELEM_VAL_090, CATALOG_ELEM_VAL_100
,CATALOG_ELEM_VAL_110, CATALOG_ELEM_VAL_120, CATALOG_ELEM_VAL_130, CATALOG_ELEM_VAL_140, CONTROL_FLAG
,CREATED_BY, CREATION_DATE, LAST_UPDATE_BY, LAST_UPDATE_DATE)
		SELECT
			INVENTORY_ITEM_ID, ITEM_NUMBER, CATEGORY_CODE_INV, CATEGORY_NAME_INV, CATEGORY_CODE_COST
,CATEGORY_NAME_COST, CATEGORY_CODE_CONTROL, CATEGORY_NAME_CONTROL, ITEM_DESC_ENG, ITEM_DESC_SCH
,ITEM_DESC_TCH, PRIMARY_UOM_CODE, SECONDARY_UOM_CODE, INVENTORY_ITEM_STATUS_CODE, ITEM_TYPE
,CATALOG_ELEM_VAL_010, CATALOG_ELEM_VAL_020, CATALOG_ELEM_VAL_030, CATALOG_ELEM_VAL_040, CATALOG_ELEM_VAL_050
,CATALOG_ELEM_VAL_060, CATALOG_ELEM_VAL_070, CATALOG_ELEM_VAL_080, CATALOG_ELEM_VAL_090, CATALOG_ELEM_VAL_100
,CATALOG_ELEM_VAL_110, CATALOG_ELEM_VAL_120, CATALOG_ELEM_VAL_130, CATALOG_ELEM_VAL_140, CONTROL_FLAG
,CREATED_BY, CREATION_DATE, LAST_UPDATE_BY, LAST_UPDATE_DATE
		FROM (
			SELECT 
				INVENTORY_ITEM_ID, ITEM_NUMBER, CATEGORY_CODE_INV, CATEGORY_NAME_INV, CATEGORY_CODE_COST
,CATEGORY_NAME_COST, CATEGORY_CODE_CONTROL, CATEGORY_NAME_CONTROL, ITEM_DESC_ENG, ITEM_DESC_SCH
,ITEM_DESC_TCH, PRIMARY_UOM_CODE, SECONDARY_UOM_CODE, INVENTORY_ITEM_STATUS_CODE, ITEM_TYPE
,CATALOG_ELEM_VAL_010, CATALOG_ELEM_VAL_020, CATALOG_ELEM_VAL_030, CATALOG_ELEM_VAL_040, CATALOG_ELEM_VAL_050
,CATALOG_ELEM_VAL_060, CATALOG_ELEM_VAL_070, CATALOG_ELEM_VAL_080, CATALOG_ELEM_VAL_090, CATALOG_ELEM_VAL_100
,CATALOG_ELEM_VAL_110, CATALOG_ELEM_VAL_120, CATALOG_ELEM_VAL_130, CATALOG_ELEM_VAL_140, CONTROL_FLAG
,CREATED_BY, CREATION_DATE, LAST_UPDATE_BY, LAST_UPDATE_DATE
			FROM ITEMS_TMP_T T
			EXCEPT
			SELECT 
				INVENTORY_ITEM_ID, ITEM_NUMBER, CATEGORY_CODE_INV, CATEGORY_NAME_INV, CATEGORY_CODE_COST
,CATEGORY_NAME_COST, CATEGORY_CODE_CONTROL, CATEGORY_NAME_CONTROL, ITEM_DESC_ENG, ITEM_DESC_SCH
,ITEM_DESC_TCH, PRIMARY_UOM_CODE, SECONDARY_UOM_CODE, INVENTORY_ITEM_STATUS_CODE, ITEM_TYPE
,CATALOG_ELEM_VAL_010, CATALOG_ELEM_VAL_020, CATALOG_ELEM_VAL_030, CATALOG_ELEM_VAL_040, CATALOG_ELEM_VAL_050
,CATALOG_ELEM_VAL_060, CATALOG_ELEM_VAL_070, CATALOG_ELEM_VAL_080, CATALOG_ELEM_VAL_090, CATALOG_ELEM_VAL_100
,CATALOG_ELEM_VAL_110, CATALOG_ELEM_VAL_120, CATALOG_ELEM_VAL_130, CATALOG_ELEM_VAL_140, CONTROL_FLAG
,CREATED_BY, CREATION_DATE, LAST_UPDATE_BY, LAST_UPDATE_DATE
			FROM ITEMS_T O
		) A

		IF EXISTS (SELECT TOP 1 * FROM @mergelist)
		BEGIN
			MERGE INTO ITEMS_T WITH (HOLDLOCK) AS A 
				USING @mergelist AS B
				ON (A.INVENTORY_ITEM_ID = B.INVENTORY_ITEM_ID)
				--更新CONTROL_FLAG = '' 及其它欄位值
				WHEN MATCHED THEN 
					UPDATE SET 
						A.CONTROL_FLAG = '', A.INVENTORY_ITEM_ID = B.INVENTORY_ITEM_ID, A.ITEM_NUMBER = B.ITEM_NUMBER, A.CATEGORY_CODE_INV = B.CATEGORY_CODE_INV, 
						A.CATEGORY_NAME_INV = B.CATEGORY_NAME_INV, A.CATEGORY_CODE_COST = B.CATEGORY_CODE_COST, A.CATEGORY_NAME_COST = B.CATEGORY_NAME_COST, 
						A.CATEGORY_CODE_CONTROL = B.CATEGORY_CODE_CONTROL, A.ITEM_DESC_ENG = B.ITEM_DESC_ENG, A.ITEM_DESC_SCH = B.ITEM_DESC_SCH,
						A.ITEM_DESC_TCH = B.ITEM_DESC_TCH, A.PRIMARY_UOM_CODE = B.PRIMARY_UOM_CODE, A.SECONDARY_UOM_CODE = B.SECONDARY_UOM_CODE,
						A.INVENTORY_ITEM_STATUS_CODE = B.INVENTORY_ITEM_STATUS_CODE, A.ITEM_TYPE = B.ITEM_TYPE, A.CATALOG_ELEM_VAL_010 = B.CATALOG_ELEM_VAL_010,
						A.CATALOG_ELEM_VAL_020 = B.CATALOG_ELEM_VAL_020, A.CATALOG_ELEM_VAL_030 = B.CATALOG_ELEM_VAL_030, A.CATALOG_ELEM_VAL_040 = B.CATALOG_ELEM_VAL_040,
						A.CATALOG_ELEM_VAL_050 = B.CATALOG_ELEM_VAL_050, A.CATALOG_ELEM_VAL_060 = B.CATALOG_ELEM_VAL_060, A.CATALOG_ELEM_VAL_070 = B.CATALOG_ELEM_VAL_070,
						A.CATALOG_ELEM_VAL_080 = B.CATALOG_ELEM_VAL_080, A.CATALOG_ELEM_VAL_090 = B.CATALOG_ELEM_VAL_090, A.CATALOG_ELEM_VAL_100 = B.CATALOG_ELEM_VAL_100,
						A.CATALOG_ELEM_VAL_110 = B.CATALOG_ELEM_VAL_110, A.CATALOG_ELEM_VAL_120 = B.CATALOG_ELEM_VAL_120, A.CATALOG_ELEM_VAL_130 = B.CATALOG_ELEM_VAL_130,
						A.CATALOG_ELEM_VAL_140 = B.CATALOG_ELEM_VAL_140, A.CREATED_BY = B.CREATED_BY, A.CREATION_DATE = B.CREATION_DATE,
						A.LAST_UPDATE_BY = B.LAST_UPDATE_BY, A.LAST_UPDATE_DATE = B.LAST_UPDATE_DATE
				--新增資料
				WHEN NOT MATCHED THEN 
					INSERT (
						INVENTORY_ITEM_ID, ITEM_NUMBER, CATEGORY_CODE_INV, CATEGORY_NAME_INV, CATEGORY_CODE_COST
,CATEGORY_NAME_COST, CATEGORY_CODE_CONTROL, CATEGORY_NAME_CONTROL, ITEM_DESC_ENG, ITEM_DESC_SCH
,ITEM_DESC_TCH, PRIMARY_UOM_CODE, SECONDARY_UOM_CODE, INVENTORY_ITEM_STATUS_CODE, ITEM_TYPE
,CATALOG_ELEM_VAL_010, CATALOG_ELEM_VAL_020, CATALOG_ELEM_VAL_030, CATALOG_ELEM_VAL_040, CATALOG_ELEM_VAL_050
,CATALOG_ELEM_VAL_060, CATALOG_ELEM_VAL_070, CATALOG_ELEM_VAL_080, CATALOG_ELEM_VAL_090, CATALOG_ELEM_VAL_100
,CATALOG_ELEM_VAL_110, CATALOG_ELEM_VAL_120, CATALOG_ELEM_VAL_130, CATALOG_ELEM_VAL_140, CREATED_BY
,CREATION_DATE, LAST_UPDATE_BY, LAST_UPDATE_DATE, CONTROL_FLAG
					) VALUES (
						INVENTORY_ITEM_ID, ITEM_NUMBER, CATEGORY_CODE_INV, CATEGORY_NAME_INV, CATEGORY_CODE_COST
,CATEGORY_NAME_COST, CATEGORY_CODE_CONTROL, CATEGORY_NAME_CONTROL, ITEM_DESC_ENG, ITEM_DESC_SCH
,ITEM_DESC_TCH, PRIMARY_UOM_CODE, SECONDARY_UOM_CODE, INVENTORY_ITEM_STATUS_CODE, ITEM_TYPE
,CATALOG_ELEM_VAL_010, CATALOG_ELEM_VAL_020, CATALOG_ELEM_VAL_030, CATALOG_ELEM_VAL_040, CATALOG_ELEM_VAL_050
,CATALOG_ELEM_VAL_060, CATALOG_ELEM_VAL_070, CATALOG_ELEM_VAL_080, CATALOG_ELEM_VAL_090, CATALOG_ELEM_VAL_100
,CATALOG_ELEM_VAL_110, CATALOG_ELEM_VAL_120, CATALOG_ELEM_VAL_130, CATALOG_ELEM_VAL_140, CREATED_BY
, CREATION_DATE, LAST_UPDATE_BY, LAST_UPDATE_DATE, '')
				OUTPUT $action, inserted.INVENTORY_ITEM_ID 'inserted', deleted.INVENTORY_ITEM_ID 'deleted' INTO @tableVar;

			SELECT @insertCount = COUNT(*) FROM @tableVar WHERE MergeAction ='INSERT'
			SELECT @updateCount = COUNT(*) FROM @tableVar WHERE MergeAction ='UPDATE'

			--失敗，引發EXCEPTION 記錄問題
			IF ((@insertCount + @updateCount) <= 0 OR @@ERROR <> 0)
			BEGIN
				SELECT @message = '更新，更新或新增資料失敗 ERROR:' + CAST(@@ERROR AS VARCHAR(100)) + ' COUNT:' + CAST(@@ROWCOUNT AS VARCHAR(100))
				RAISERROR(@message, 16, @success)
			END 

			
		END
		
		SET @code = 0
		SET @message = ''
		
	END TRY
	BEGIN CATCH
		SET @code = -1 * @success
		SET @message = CAST(@success AS VARCHAR(2)) + ':' + ERROR_MESSAGE()
	END CATCH

	SELECT @code 'CODE', @message 'MESSAGE', @insertCount 'INSERT_COUNT', @updateCount 'UPDATE_COUNT', @deleteCount 'DELETE_COUNT'

END

